#!/usr/bin/env python3

import argparse
import cv2
import numpy as np


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('filename')
    parser.add_argument('output')
    parser.add_argument('-k', type=int, default=8)
    options = parser.parse_args()

    img = cv2.imread(options.filename)
    Z = img.reshape((-1, 3))

    # convert to np.float32
    Z = np.float32(Z)

    # define criteria, number of clusters(K) and apply kmeans()
    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)
    ret, label, center = cv2.kmeans(Z, options.k, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)

    # Convert the selected colors back to uint8.
    center = np.uint8(center)

    # Get the hex colors (bgr->rgb).
    hex_colors = []
    for color in center:
        b, g, r = color
        hex_colors.append("%02x%02x%02x" % (r, g, b))

    with open('palette.html', 'w') as fh:
        fh.write("<style>.color { width: 100px; height: 100px; }</style>\n")
        for color in hex_colors:
            fh.write("<div class='color' style='background-color: #%s;'></div>\n" % color)

    # Summarize the colors to the console.
    for hex_color in hex_colors:
        print(f"#{hex_color}")

    res = center[label.flatten()]
    res2 = res.reshape((img.shape))

    cv2.imwrite(options.output, res2)


if __name__ == "__main__":
    main()
